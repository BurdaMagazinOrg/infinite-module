<?php

use Drupal\Core\Database\Database;

use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_install().
 */
function infinite_base_install() {

  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Promoted to top presenter',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema = Database::getConnection()->schema();
  $schema->addField('node_field_data', 'promote_top_presenter', $spec);
  $schema->addField('node_field_revision', 'promote_top_presenter', $spec);


  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Promoted to frontpage presenter',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema = Database::getConnection()->schema();
  $schema->addField('node_field_data', 'promote_front_presenter', $spec);
  $schema->addField('node_field_revision', 'promote_front_presenter', $spec);


  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Promoted to channel page',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema = Database::getConnection()->schema();
  $schema->addField('node_field_data', 'promote_channel', $spec);
  $schema->addField('node_field_revision', 'promote_channel', $spec);


  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Promoted to channel presenter',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema = Database::getConnection()->schema();
  $schema->addField('node_field_data', 'promote_channel_presenter', $spec);
  $schema->addField('node_field_revision', 'promote_channel_presenter', $spec);


  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Mark as sponsored',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema = Database::getConnection()->schema();
  $schema->addField('node_field_data', 'sponsored', $spec);
  $schema->addField('node_field_revision', 'sponsored', $spec);

}

function infinite_base_uninstall() {

  $schema = Database::getConnection()->schema();
  $schema->dropField('node_field_data', 'sponsored');
  $schema->dropField('node_field_revision', 'sponsored');
  $schema->dropField('node_field_data', 'promote_front_presenter');
  $schema->dropField('node_field_revision', 'promote_front_presenter');
  $schema->dropField('node_field_data', 'promote_top_presenter');
  $schema->dropField('node_field_revision', 'promote_top_presenter');
  $schema->dropField('node_field_data', 'promote_channel');
  $schema->dropField('node_field_revision', 'promote_channel');
  $schema->dropField('node_field_data', 'promote_channel_presenter');
  $schema->dropField('node_field_revision', 'promote_channel_presenter');

}

/**
 * Update base fields to the schema.
 */
function infinite_base_update_8104() {
  // Do nothing here any more. Add 8105 with migrate code when new field type is ready.
}


/**
 * Update vocabularies to use SEO fields.
 */
function infinite_base_update_8107(&$sandbox) {
  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityStorageInterface $taxonomy_term_storage */
  $taxonomy_term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // We get all terms regardless of vocabulary, this avoids hardcoding those.
  if (!isset($sandbox['total'])) {
    $sandbox['current'] = 0;
    $sandbox['count'] = 0;
    $sandbox['total'] = $taxonomy_term_storage->getQuery()
      ->accessCheck(FALSE)
      ->count()->execute();
  }
  $tids = $taxonomy_term_storage->getQuery()
    ->accessCheck(FALSE)
    ->range(0, 50)
    ->condition('tid', $sandbox['current'], '>')
    ->execute();
  $taxonomy_terms = $taxonomy_term_storage->loadMultiple($tids);

  $search = [
    '[term:title]',
    '[term:description]'
  ];
  $replace = [
    '[term:field_seo_title:value]',
    '[term:field_seo_description:value]'
  ];
  foreach ($taxonomy_terms as $term) {
    // In case the vocabulary does not have the new fields ignore.
    $field_definitions = $term->getFieldDefinitions();
    if (!isset($field_definitions['field_seo_title'])) {
      continue;
    }
    $meta = FALSE;
    // Check for meta info
    if (isset($term->field_meta_tags->value) && strlen($term->field_meta_tags->value) > 2) {
      $meta = unserialize($term->field_meta_tags->value);
    }
    // We try to update the tokens in the fields that we know may use them. If
    // there is no successfull replacement in the "default" meta tags, we
    // update the new fields from those and put the new tokens into the meta
    // tags.
    // Otherwise, we update the fields from the name and description fields
    // and leave the meta tags alone.
    if ($meta) {
      if (isset($meta['title'])) {
        $count = 0;
        $meta['title'] = str_replace($search, $replace, $meta['title'], $count);
        if ($count === 0) {
          $term->set('field_seo_title', $meta['title']);
          $meta['title'] = '[term:field_seo_title:value]';
        }
        else {
          $term->set('field_seo_title', $term->get('name')->value);
        }
      }
      if (isset($meta['description'])) {
        $count = 0;
        $meta['description'] = str_replace($search, $replace, $meta['description'], $count);
        if ($count === 0) {
          $term->set('field_seo_description', $meta['description']);
          $meta['description'] = '[term:field_seo_description:value]';
        }
        else {
          $term->set('field_seo_description', strip_tags($term->get('description')->value));
        }
      }
      if (isset($meta['og_title'])) {
        $meta['og_title'] = str_replace($search, $replace, $meta['og_title']);
      }
      if (isset($meta['og_description'])) {
        $meta['og_description'] = str_replace($search, $replace, $meta['og_description']);
      }
      if (isset($meta['twitter_cards_title'])) {
        $meta['twitter_cards_title'] = str_replace($search, $replace, $meta['twitter_cards_title']);
      }
      // put the new values back
      $term->set('field_meta_tags', serialize($meta));
    }
    // no meta info, just set fields.
    else {
      $term->set('field_seo_title', $term->get('name')->value);
      $term->set('field_seo_description', strip_tags($term->get('description')->value));
    }
    $term->save();
    $sandbox['current'] = $term->id();
    $sandbox['count']++;
  }
}
