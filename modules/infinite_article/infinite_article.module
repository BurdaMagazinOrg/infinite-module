<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_build_defaults_alter().
 */
function infinite_article_node_build_defaults_alter(array &$build, EntityInterface $node, $view_mode) {

  if($node->bundle() == 'article' && !$node->get('field_header_blocks')->isEmpty()){

    /** @var \Drupal\Core\Theme\ActiveTheme $theme */
    $theme = \Drupal::service('theme.manager')->getActiveTheme();
    $base_themes = $theme->getBaseThemes();

    if ($view_mode == 'lazyloading') {

      // Replace 'advertisingslot_banner_any' with 'advertisingslot_banner_any_2' in header blocks on lazyloading.
      $header_blocks = $node->get('field_header_blocks')->getValue();
      foreach ($header_blocks as $key => &$header_block) {
        if ($header_block['target_id'] == 'advertisingslot_banner_any') {
          $header_block['target_id'] = 'advertisingslot_banner_any_2';
          $node->set('field_header_blocks', $header_blocks);
        }
        else {
          if (\Drupal::moduleHandler()
              ->moduleExists('ad_entity') && $header_block['target_id'] == 'adblock_full_article'
          ) {
            $header_block['target_id'] = 'adblock_full_article_2';
            $node->set('field_header_blocks', $header_blocks);
          }
        }
      }
    }
    elseif(array_key_exists('infinite_amp', $base_themes)) {
      // Replace defined ad blocks by the corresponding amp ad blocks.
      $header_blocks = $node->get('field_header_blocks')->getValue();
      foreach ($header_blocks as $key => &$header_block) {
        $block = \Drupal::entityTypeManager()
          ->getStorage('block')
          ->load($header_block['target_id']);

        $replacement_block_id = $header_block['target_id'] . '_amp';
        $replacement_block = \Drupal::entityTypeManager()
          ->getStorage('block')
          ->load($replacement_block_id);

        if(isset($replacement_block)){
          $header_block['target_id'] = $replacement_block_id;
        }
        elseif($block->getPlugin() == 'ad_entity_block') {
          unset($header_blocks[$key]);
        }
      }
      $node->set('field_header_blocks', $header_blocks);
    }

  }

}

/**
 * Implements hook_form_node_article_edit_form_alter().
 */
function infinite_article_form_node_article_edit_form_alter(&$form, FormStateInterface $form_state) {
  _infinite_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_form_alter().
 */
function infinite_article_form_node_article_form_alter(&$form, FormStateInterface $form_state) {
  _infinite_article_form_alter_helper($form, $form_state);
}

/**
 * Helper function for article form alter hooks.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _infinite_article_form_alter_helper(&$form, FormStateInterface $form_state) {
  // Move field_promote_states to options group.
  $form['field_promote_states']['#group'] = 'options';
  if (isset($form['field_hide_created'])) {
    $form['field_hide_created']['#group'] = 'author';
  }
}
