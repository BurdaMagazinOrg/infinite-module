<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate infinite_views.
 */

use Drupal\Core\Render\Element;
use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 *
 * Exclude previous loaded NIDs from presenter views.
 *
 * Switch view display on channel taxonomy terms.
 */
function infinite_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // Switch to other views display in infinite_taxonomy_term view for page displays.
  if ($view->id() == 'infinite_taxonomy_term' && $view->getDisplay()
      ->getBaseId() == 'page' && $display_id != 'rss'
  ) {

    if (\Drupal::service('path.matcher')->isFrontPage()) {
      $view->setDisplay('front');
    }
    else {
      /* @var Drupal\taxonomy\Entity\Term $term */
      $term = Term::load($args[0]);
      if ($term->getVocabularyId() == 'channel') {
        $view->setDisplay('channel');
      }
      else {
        $view->setDisplay('term');
      }
    }
  }

  // Exclude front / channel presenter nodes from infinite_front / infinite_taxonomy_term streaming view.
  if (($view->id() == 'infinite_front_presenter' && $view->current_display == 'four_teasers') ||
    ($view->id() == 'infinite_taxonomy_term' && ($view->getDisplay()->display['id'] == 'front' || $view->getDisplay()->display['id'] == 'channel'))
  ) {

    $presenter_view = 'infinite_channel_presenter';
    $exclude_displays = array('exclude');
    if (\Drupal::service('path.matcher')->isFrontPage()) {

      $presenter_view = 'infinite_front_presenter';
      $exclude_displays[] = 'exclude_top';

      if ($view->current_display == 'four_teasers') {
        $exclude_displays = array('exclude_top');  // Here we must use only exclude_top display.
      }
    }
    _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
  }
  elseif ($view->id() == 'infinite_front_presenter' && $view->current_display == 'exclude') {
    $presenter_view = 'infinite_front_presenter';
    $exclude_displays = ['exclude_top'];
    _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
  }
  else {
    if ($view->id() == 'infinite_archive' && empty($args)) {  // Get default contextual filter for loading /archive
      $args[] = infinite_views_archive_default_argument();
    }
    else if ($view->id() == 'infinite_vocabulary' && $view->current_display == 'attachment_1') {
      unset($args[1]);  // Remove second arg on infinite vocabulary attachment
    }
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_views_preprocess_views_view(&$variables) {
  // todo: replace with configurable sidebar views UI plugin.
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  switch ($view->id()) {
    case 'infinite_author':
    case 'infinite_front':
    case 'infinite_taxonomy_term':
      if ($view->current_display != 'front' &&
          $view->current_display != 'channel' &&
          $view->current_display != 'term') {

        $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel_2');
      }
      else {
        $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel');
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_views_preprocess_views_view_unformatted(&$variables) {
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Place dynamic blocks in taxonomy term stream from 'Dynamic blocks for taxonomy terms' region.
  if ($view->id() == 'infinite_taxonomy_term' && $dyn_blocks = _infinite_blocks_get_dyn_region_blocks(['dyn_blocks_taxonomy_term'])) {

    // Check for first 5 teasers from attachment.
    if ($view->pager->current_page === NULL) {
      $render_dyn_block_key = 0;
    }
    else {
      $render_dyn_block_key = $view->pager->current_page + 1;
    }

    // Add block when one exists from block ordering of region.
    if (isset($dyn_blocks[$render_dyn_block_key])) {

      // Get render array of dynamic block.
      $block_content = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($dyn_blocks[$render_dyn_block_key]);

      // Place dynamic block after 3rd teaser.
      $dyn_block_row[] = ['content' => $block_content];
      array_splice($variables['rows'], 3, 0, $dyn_block_row);
    }
  }
}

/**
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 *
 * @return string
 *   The date argument
 */
function infinite_views_archive_default_argument() {
  // Find latest published article node.
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('status', NODE_PUBLISHED)
    ->sort('created', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!empty($result)) {
    $node = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load(reset($result));

    return \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'Ym');
  }
}

/**
 * Returns rendered advertisement block with the given id.
 *
 * @param string $id
 *
 * @return array
 *   The block render array
 */
function _infinite_views_sidebar_ad_block($id) {
  /* @var Drupal\block\Entity\Block $block */
  $block = Block::load($id);

  if (is_object($block)) {
    return \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block, 'default');
  }
  return FALSE;
}

function _infinite_views_get_exclude_nids_helper($views_id, $exclude_displays, array &$args) {
  $exclude_nids = array();
  foreach($exclude_displays as $views_display) {
    $exclude_view = views_get_view_result($views_id, $views_display);
    foreach ($exclude_view as $exclude_node) {
      $exclude_nids[] = $exclude_node->nid;
    }
  }

  if (!empty($exclude_nids)) {
    $args[] = implode('+', $exclude_nids);
  }
}
