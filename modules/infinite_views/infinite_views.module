<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate infinite_views.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 *
 * Exclude previous loaded NIDs from presenter views.
 *
 * Switch view display on channel taxonomy terms.
 */
function infinite_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

	$isFrontPage = \Drupal::service('path.matcher')->isFrontPage();

	switch ($view->id()) {

		case 'infinite_archive':

			// Get default contextual filter for loading /archive
			if (empty($args)) {
				$args[] = infinite_views_archive_default_argument();
			}
			break;

		case 'infinite_front_presenter':
		case 'infinite_channel_presenter':

		// Exclude front / channel presenter nodes from infinite_front streaming view.
			if ($view->current_display == 'four_teasers') {

				$args = [];  // Clear default added args to get exclude NIDs working.
				$exclude_displays = ['exclude_top'];

				$presenter_view = 'infinite_channel_presenter';
				if ($isFrontPage) {
					$presenter_view = 'infinite_front_presenter';
				}

				_infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
			}
			break;

		case 'infinite_taxonomy_term':

			// Switch to other views display in infinite_taxonomy_term view for page displays.
			if ($view->getDisplay()->getBaseId() == 'page' && $display_id != 'rss') {

				if ($isFrontPage) {
					$view->setDisplay('front');
				}
				else {
					/* @var Drupal\taxonomy\Entity\Term $term */
					$term = Term::load($args[0]);
					if ($term->getVocabularyId() == 'channel') {
						$view->setDisplay('channel');
					}
					else {
						$view->setDisplay('term');
					}
				}
			}

			// Exclude front / channel presenter nodes infinite_taxonomy_term streaming view.
			if ($view->getDisplay()->display['id'] == 'front' || $view->getDisplay()->display['id'] == 'channel') {
				$exclude_displays = ['exclude_top', 'exclude'];

				$presenter_view = 'infinite_channel_presenter';
				if ($isFrontPage) {
					$presenter_view = 'infinite_front_presenter';
				}

				_infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
			}
			break;

		case 'infinite_vocabulary':

			// Remove second arg on infinite vocabulary attachment
			if ($view->current_display == 'attachment_1') {
				unset($args[1]);
			}
       break;

		default:
	}

	// Set possible changed $args for view.
	$view->setArguments($args);


//  TODO: Remove if tests are done. Deprecated code.
//  if (($view->id() == 'infinite_front_presenter' && $view->current_display == 'four_teasers') ||
//    ($view->id() == 'infinite_taxonomy_term' && ($view->getDisplay()->display['id'] == 'front' || $view->getDisplay()->display['id'] == 'channel'))
//  ) {
//
//    $presenter_view = 'infinite_channel_presenter';
//    $exclude_displays = array('exclude');
//
//    if ($isFrontPage) {
//
//      $presenter_view = 'infinite_front_presenter';
//      $exclude_displays[] = 'exclude_top';
//
//      if ($view->current_display == 'four_teasers') {
//        $exclude_displays = array('exclude_top');  // Here we must use only exclude_top display.
//      }
//    }
//    _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
//	}
//  elseif ($view->id() == 'infinite_front_presenter' && $view->current_display == 'exclude') {
//    $presenter_view = 'infinite_front_presenter';
//    $exclude_displays = ['exclude_top'];
//    _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
//  }

}

/**
 * Implements hook_preprocess_views().
 */
function infinite_views_preprocess_views_view(&$variables) {
  // todo: replace with configurable sidebar views UI plugin.
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  switch ($view->id()) {
    case 'infinite_author':
    case 'infinite_front':
    case 'infinite_taxonomy_term':
      $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel');
      if (\Drupal::moduleHandler()->moduleExists('ad_entity')){
        $variables['sidebar'] = _infinite_views_sidebar_ad_block('adblock_sidebar_stream');
      }

      if ($view->current_display != 'front' &&
          $view->current_display != 'channel' &&
          $view->current_display != 'term') {

        $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel_2');
        if (\Drupal::moduleHandler()->moduleExists('ad_entity')) {
          $variables['sidebar'] = _infinite_views_sidebar_ad_block('adblock_sidebar_stream_2');
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_views_preprocess_views_view_unformatted(&$variables) {
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Place dynamic blocks in taxonomy term stream from 'Dynamic blocks for taxonomy terms' region.
  if ($view->id() == 'infinite_taxonomy_term' && $dyn_blocks = _infinite_blocks_get_dyn_region_blocks(['dyn_blocks_taxonomy_term'])) {

    // Check for first 5 teasers from attachment.
    if ($view->pager->current_page === NULL) {
      $render_dyn_block_key = 0;
    }
    else {
      $render_dyn_block_key = $view->pager->current_page + 1;
    }

    // Add block when one exists from block ordering of region.
    if (isset($dyn_blocks[$render_dyn_block_key])) {

      // Get render array of dynamic block.
      $block_content = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($dyn_blocks[$render_dyn_block_key]);

      // Place dynamic block after 3rd teaser.
      $dyn_block_row[] = ['content' => $block_content];
      array_splice($variables['rows'], 3, 0, $dyn_block_row);
    }
  }
}

/**
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 *
 * @return string
 *   The date argument
 */
function infinite_views_archive_default_argument() {
  // Find latest published article node.
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('status', NODE_PUBLISHED)
    ->sort('created', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!empty($result)) {
    $node = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load(reset($result));

    return \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'Ym');
  }
}

/**
 * Returns rendered advertisement block with the given id.
 *
 * @param string $id
 *
 * @return array
 *   The block render array
 */
function _infinite_views_sidebar_ad_block($id) {
  /* @var Drupal\block\Entity\Block $block */
  $block = Block::load($id);

  if (is_object($block)) {
    return \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block, 'default');
  }
  return FALSE;
}

function _infinite_views_get_exclude_nids_helper($views_id, $exclude_displays, array &$args) {
  $exclude_nids = array();
  foreach($exclude_displays as $views_display) {
    $exclude_view = views_get_view_result($views_id, $views_display);
    foreach ($exclude_view as $exclude_node) {
      $exclude_nids[] = $exclude_node->nid;
    }
  }

  if (!empty($exclude_nids)) {
    $args[] = implode('+', $exclude_nids);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function infinite_views_module_implements_alter(&$implementations, $hook) {
  // Ensure that this module is called in the end.
  if ($hook == 'page_attachments_alter') {
    $group = $implementations['infinite_views'];
    unset($implementations['infinite_views']);
    $implementations['infinite_views'] = $group;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function infinite_views_page_attachments_alter(array &$attachments) {
  global $pager_total, $pager_page_array;

  if(isset($pager_page_array[0])){
    $current_path = Url::fromRoute('<current>');
    $query = \Drupal::request()->query->all();
    $current_page = $query['page'];
    $attached = &$attachments['#attached'];

    if($pager_page_array[0] > 1){
      $query['page'] = ($pager_page_array[0] - 1);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'prev',
          'href' => $href,
        ],
      ], 'rel_prev'];
    }
    elseif($pager_page_array[0] == 1) {
      unset($query['page']);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'prev',
          'href' => $href,
        ],
      ], 'rel_prev'];
    }

    if($pager_page_array[0] < $pager_total[0] - 1){
      $query['page'] = ($pager_page_array[0] + 1);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'next',
          'href' => $href,
        ],
      ], 'rel_next'];
    }

    foreach ($attached['html_head_link'] as $key => &$item) {
      if($item[0]['rel'] == 'canonical'){

        if(\Drupal::service('router.amp_context')->isAmpRoute()){
          unset($query['amp']);
          if($current_page){
            $query['page'] = $current_page;
          }
          else {
            unset($query['page']);
          }

          $current_path->setOption('absolute', TRUE);
          $current_path->setOption('query', $query);

          $attached['html_head'][] = [[
            '#type' => 'html_tag',
            '#tag' => 'link',
            '#attributes' => [
              'rel' => 'canonical',
              'href' => $current_path->toString(),
            ],
          ], 'rel_canonical'];

        }

        unset($attached['html_head_link'][$key]);
      }
    }

  }

  return;
}
