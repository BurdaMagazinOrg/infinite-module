<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate infinite_views.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_views_pre_view().
 *
 * Exclude previous loaded NIDs from presenter views.
 *
 * Switch view display on channel taxonomy terms.
 */
function infinite_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  switch ($view->id()) {

    case 'infinite_archive':

      // Get default contextual filter for loading /archive
      if (empty($args)) {
        $args[] = infinite_views_archive_default_argument();
      }
      break;

    case 'infinite_front_presenter':

      // Exclude top presenter nodes from infinite_front_presenter view.
      if ($view->current_display == 'four_teasers' || $view->current_display == 'exclude') {

        $args = [];  // Clear default added args to get exclude NIDs working.
        $exclude_displays = ['exclude_top'];
        $presenter_view = 'infinite_front_presenter';
        _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
      }
      break;

    case 'infinite_taxonomy_term':

      $isFrontPage = \Drupal::service('path.matcher')->isFrontPage();

      // Switch to other views display in infinite_taxonomy_term view for page displays.
      if ($view->getDisplay()->getBaseId() == 'page' && $display_id != 'rss') {

        if ($isFrontPage) {
          $view->setDisplay('front');
        }
        else {
          /* @var Drupal\taxonomy\Entity\Term $term */
          $term = Term::load($args[0]);
          if ($term->getVocabularyId() == 'channel') {
            $view->setDisplay('channel');
          }
          else {
            $view->setDisplay('term');
          }
        }
      }

      // Exclude front / channel presenter nodes infinite_taxonomy_term streaming view.
      if ($view->getDisplay()->display['id'] == 'front' || $view->getDisplay()->display['id'] == 'channel') {

        $exclude_displays = ['exclude'];
        $presenter_view = 'infinite_channel_presenter';
        if ($isFrontPage) {
          $exclude_displays = ['exclude_top', 'exclude'];  // exclude_top is currently only used on frontpage.
          $presenter_view = 'infinite_front_presenter';
        }

        _infinite_views_get_exclude_nids_helper($presenter_view, $exclude_displays, $args);
      }
      break;

    case 'infinite_vocabulary':

      // Remove second arg on infinite vocabulary attachment
      if ($view->current_display == 'attachment_1') {
        unset($args[1]);
      }
      break;
    default:
      break;
  }

  // Set possible changed $args for view.
  $view->setArguments($args);
}

/**
 * Implements hook_views_query_alter().
 */
function infinite_views_views_query_alter(ViewExecutable $view, QueryPluginBase &$query) {
  switch ($view->id()) {
    case 'advertising_products':
      /* This is somewhat brutal: since the argument handler does not support
       * LIKE queries, we do change the query here. We need to introduce more
       * condition groups in case of multiple arguments.
       */
      if ($view->current_display == 'embed_in_advertising_products_paragraph') {
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if (strpos($condition['field'], 'field_product_category_txt_value') !== FALSE) {
              if (is_array($condition['value'])) {
                foreach ($condition['value'] as $idx => $value) {
                  if ($idx > 0) {
                    $condition_group['conditions'][] = [
                      'field' => $condition['field'],
                      'value' => '%' . $value . '%',
                      'operator' => 'LIKE',
                    ];
                  }
                }
                $condition_group['type'] = 'OR';
                $condition['operator'] = 'LIKE';
                $condition['value'] = '%' . $condition['value'][0] . '%';
              }
              else {
                $condition['operator'] = 'LIKE';
                $condition['value'] = '%' . $condition['value'] . '%';
              }
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_views_preprocess_views_view(&$variables) {
  // todo: replace with configurable sidebar views UI plugin.
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  switch ($view->id()) {
    case 'infinite_author':
    case 'infinite_front':
    case 'infinite_taxonomy_term':
      $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel');
      if (\Drupal::moduleHandler()->moduleExists('ad_entity')){
        $variables['sidebar'] = _infinite_views_sidebar_ad_block('adblock_sidebar_stream');
      }

      if ($view->current_display != 'front' &&
          $view->current_display != 'channel' &&
          $view->current_display != 'term') {

        $variables['sidebar'] = _infinite_views_sidebar_ad_block('advertisingslot_rectangle_any_channel_2');
        if (\Drupal::moduleHandler()->moduleExists('ad_entity')) {
          $variables['sidebar'] = _infinite_views_sidebar_ad_block('adblock_sidebar_stream_2');
        }
      }
      break;
  }
}

/**
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 *
 * @return string
 *   The date argument
 */
function infinite_views_archive_default_argument() {
  // Find latest published article node.
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('status', NODE_PUBLISHED)
    ->sort('created', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!empty($result)) {
    $node = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load(reset($result));

    return \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'Ym');
  }
}

/**
 * Returns rendered advertisement block with the given id.
 *
 * @param string $id
 *
 * @return array
 *   The block render array
 */
function _infinite_views_sidebar_ad_block($id) {
  /* @var Drupal\block\Entity\Block $block */
  $block = Block::load($id);

  if (is_object($block)) {
    return \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block, 'default');
  }
  return FALSE;
}

function _infinite_views_get_exclude_nids_helper($views_id, $exclude_displays, array &$args) {
  $exclude_nids = array();
  foreach($exclude_displays as $views_display) {
    $exclude_view = views_get_view_result($views_id, $views_display);
    foreach ($exclude_view as $exclude_node) {
      $exclude_nids[] = $exclude_node->nid;
    }
  }

  if (!empty($exclude_nids)) {
    $args[] = implode('+', $exclude_nids);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function infinite_views_module_implements_alter(&$implementations, $hook) {
  // Ensure that this module is called in the end.
  if ($hook == 'page_attachments_alter') {
    $group = $implementations['infinite_views'];
    unset($implementations['infinite_views']);
    $implementations['infinite_views'] = $group;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function infinite_views_page_attachments_alter(array &$attachments) {
  global $pager_total, $pager_page_array;

  if(isset($pager_page_array[0])){
    $current_path = Url::fromRoute('<current>');
    $query = \Drupal::request()->query->all();
    $current_page = isset($query['page']) ? $query['page'] : FALSE;
    $attached = &$attachments['#attached'];

    if(isset($query['amp'])){
      $query  = ['amp' => ''] + $query;
    }

    $has_prev = FALSE;
    if($pager_page_array[0] > 1){
      $query['page'] = ($pager_page_array[0] - 1);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'prev',
          'href' => $href,
        ],
      ], 'rel_prev'];
      $has_prev = TRUE;
    }
    elseif($pager_page_array[0] == 1) {
      unset($query['page']);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'prev',
          'href' => $href,
        ],
      ], 'rel_prev'];
      $has_prev = TRUE;
    }

    if($pager_page_array[0] < $pager_total[0] - 1){
      $query['page'] = ($pager_page_array[0] + 1);
      $href = $current_path->setOption('query', $query)->toString();
      $href = str_replace('amp=', 'amp', $href);
      $attached['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'next',
          'href' => $href,
        ],
      ], 'rel_next'];
    }

    foreach ($attached['html_head_link'] as $key => &$item) {
      if($item[0]['rel'] == 'canonical'){
        // If there is no previous page we are at the first page. Only here
        // we add a canonical link, otherwise we unset.
        if ($has_prev) {
          unset($attached['html_head_link'][$key]);
        }
        else {
          unset($query['amp']);
          if($current_page){
            $query['page'] = $current_page;
          }
          elseif(isset($query['page'])) {
            unset($query['page']);
          }
          $current_path->setOption('absolute', TRUE);
          $current_path->setOption('query', $query);
          $attached['html_head'][] = [[
              '#type' => 'html_tag',
              '#tag' => 'link',
              '#attributes' => [
                'rel' => 'canonical',
                'href' => $current_path->toString(),
              ],
            ], 'rel_canonical'];
          unset($attached['html_head_link'][$key]);
        }
      }
    }
    // If our page index is >= 1, ie if there is a "prev" page,
    // we do not want this page to be indexed, but still searched.
    if ($has_prev) {
      // unset any other robots directive
      foreach ($attached['html_head'] as $key => &$item) {
        if(isset($item[0]['#attributes']['name']) && $item[0]['#attributes']['name'] == 'robots'){
          unset($attached['html_head'][$key]);
        }
      }
      $attached['html_head'][] = [[
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'robots',
            'content' => 'noindex, follow',
          ],
        ], 'meta_noindex'];
    }
  }
}
