<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\file\Entity\File;
use Drupal\infinite_advertising_products\ReplaceAmazonTags;

/**
 * Implements hook_ENTITY_TYPE_presave() for advertising_product entities.
 */
function infinite_advertising_products_advertising_product_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'advertising_product_tracdelight') {
    /** @var \Drupal\advertising_products\Entity\AdvertisingProduct $entity */
    if (isset($entity->product_data) && $entity->hasField('field_product_category_txt')) {
      $entity->field_product_category_txt->value = $entity->product_data['category']['name'] ? : 'not available';
    }
  }
  if (
    \Drupal::hasService('visenze.tagging')
    && $entity->hasField('field_visenze')
    && !$entity->field_visenze->value
    && $entity->product_image->get(0)->entity instanceof File
  ) {
    $image_url = file_create_url($entity->product_image->get(0)->entity->getFileUri());
    $visenzeTagging = \Drupal::service('visenze.tagging');

    if (($data = $visenzeTagging->getData($image_url)) && $visenzeTagging->isValid()) {
      $entity->field_visenze->value = json_encode($data);
    }
    else {
      \Drupal::logger('visenze')->error('Could not obtain tagging info for image @image (node: @id): @errors',
        [
          '@id' => $entity->id(),
          '@image' => $image_url,
          '@errors' => print_r($visenzeTagging->getErrors(), TRUE),
        ]
      );
    }

  }
}

/**
 * Implements hook_preprocess_HOOK() for advertising_product entity.
 */
function infinite_advertising_products_preprocess_advertising_product(&$variables) {
  $product = $variables['elements']['#advertising_product'];

  // Set the data attributes for tracking purposes.
  $data_attributes = new Drupal\Core\Template\Attribute;
  $data_attributes->setAttribute('data-vars-product-name', $product->product_name->value)
    ->setAttribute('data-vars-product-shop', $product->product_shop->value)
    ->setAttribute('data-vars-product-brand', $product->product_brand->value)
    ->setAttribute('data-vars-product-price', $product->product_price->value)
    ->setAttribute('data-vars-product-currency', $product->product_currency->value)
    ->setAttribute('data-vars-product-uuid', $product->uuid->value)
    ->setAttribute('data-vars-product-id', $product->product_id->value)
    ->setAttribute('data-vars-product-category', 'undefined')
    ->setAttribute('data-vars-product-sold-out', $product->product_sold_out->value)
    ->setAttribute('data-vars-product-provider', 'undefined')
    ->setAttribute('data-vars-product-view-mode', $variables['elements']['#view_mode'])
    ->setAttribute('data-vars-product-position', 'undefined');  // TODO: Find a way to provide product position or left it undefined.

  // If exists set product category.
  if ($product->hasField('field_product_category_txt') && !$product->field_product_category_txt->isEmpty()) {
    $data_attributes->setAttribute('data-vars-product-category', trim($product->field_product_category_txt->value));
  }

  // Filter string of product provider.
  if ($product->product_provider->value && strpos($product->product_provider->value, '_provider') !== FALSE) {
    $data_attributes->setAttribute('data-vars-product-provider', str_replace('_provider', '', $product->product_provider->value));
  }

  // Provide data_attributes for advertising product TWIG file.
  $variables['data_attributes'] = $data_attributes;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for node entities.
 */
function infinite_advertising_products_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $view_modes = [
    'amp',
    'full',
    'lazyloading',
  ];
  if (($entity->hasField('field_amazon_tag'))
    && !$entity->field_amazon_tag->isEmpty()
    && in_array($build['#view_mode'], $view_modes)) {

    $build['#post_render'][] = 'infinite_advertising_products_replace_amazon_tag';
  }
}

/**
 * Post render callback to replace Amazon tag for non-ProductDB products.
 *
 * @param $markup
 *   The markup result of the rendering.
 *
 * @param $elements
 *   The elements of the rendering.
 *
 * @return mixed
 *   The markup result.
 */
function infinite_advertising_products_replace_amazon_tag($markup, $elements) {
  $view_mode = $elements['#view_mode'];
  $node = $elements['#node'];

  $contentReplaceAmazonTags = new ReplaceAmazonTags($node->field_amazon_tag->value, $view_mode);
  $contentReplaceAmazonTags->replaceAmazonTags($markup);
  return $contentReplaceAmazonTags->getMarkup();
}
