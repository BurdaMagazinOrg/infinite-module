<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\user\UserInterface;

/**
 * @file
 * Enriches data layer with information about nodes, taxonomy terms and users.
 */

/**
 * Implements hook_entity_view().
 */
function infinite_datalayer_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // We ony want datalayer for node, taxonomy_term or user entities.
  if(!in_array($entity->getEntityTypeId(), ['node', 'taxonomy_term', 'user'])) {
    return;
  }

  // Do nothing if view mode is not a datalayer view mode for this entity type.
  if (!in_array($view_mode, infinite_datalayer_get_datalayer_view_modes($entity->getEntityTypeId()))) {
    return;
  }

  $datalayer_variables = infinite_datalayer_get_variables($entity, $view_mode);
  if($datalayer_variables){
    infinite_datalayer_add($build, $entity->uuid(), $datalayer_variables);
  }
}

function infinite_datalayer_get_variables(EntityInterface $entity, $view_mode) {
  $entity_type = $entity->getEntityTypeId();

  $entity_bundle = $entity->bundle();
  $entity_id = $entity->id();
  $entity_uuid = $entity->uuid();
  $label = $entity->label();

  $datalayer_variables = _infinite_datalayer_initialize_variables();

  $datalayer_variables['page'] = [
    'name' => $label,
    'entityType' => $entity_type,
    'contentType' => $entity_bundle,
    'entityID' => $entity_id,
  ];
  $key = $entity_uuid;

  $alter_hooks = [
    'infinite_datalayer_entity',
    'infinite_datalayer_' . $entity_type,
    'infinite_datalayer_' . $entity_type . '_' . $entity_bundle,
  ];
  $context = [
    'key' => $key,
    'entity' => $entity,
    'view_mode' => $view_mode,
  ];
  \Drupal::moduleHandler()->alter($alter_hooks, $datalayer_variables, $context);

  return $datalayer_variables;
}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_node_alter(&$datalayer_variables, $context) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $context['entity'];
  $datalayer_variables_page = &$datalayer_variables['page'];
  $datalayer_variables_page['authorName'] = $node->getOwner()->getDisplayName();

  if($content_sub_type = _infinite_datalayer_content_sub_types($node)){
    $datalayer_variables_page['contentSubType'] = $content_sub_type;
  }

  if($node->hasField('field_channel')){
    if (isset($node->field_channel->entity)) {
      $datalayer_variables_page += _infinite_datalayer_category($node->field_channel->entity);
      $datalayer_variables_page['channelId'] = $node->field_channel->entity->id();
    }
  }

  if($node->bundle() == 'article'){
    $datalayer_variables_page['articlePublishDate'] = date(DATE_ISO8601, $node->created->value);

    if (\Drupal::request()->attributes->get('js') == 'ajax') {
      $context['key'] = $node->uuid();
    }
    else {
      $context['key'] = 'page';
    }
  }
  else {
    $datalayer_variables_page['publishDate'] = date(DATE_ISO8601, $node->created->value);
  }

}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_taxonomy_term_alter(&$datalayer_variables, $context) {
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $context['entity'];
  if ($term->bundle() == 'channel') {
    $datalayer_variables['page'] += _infinite_datalayer_category($term);
  }
  $context['key'] = 'page';

  if($content_sub_type = _infinite_datalayer_content_sub_types($term)){
    $datalayer_variables['page']['contentSubType'] = $content_sub_type;
  }
}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_user_alter(&$datalayer_variables, $context) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $context['entity'];
  if (strpos($context['view_mode'], 'amp') === 0 ||
    \Drupal::routeMatch()->getRouteName() != 'entity.user.canonical' ||
    \Drupal::routeMatch()->getParameter('user')->id() != $user->id()
  ) {
    $datalayer_variables = FALSE;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function infinite_datalayer_preprocess_node(&$variables) {
  $variables['uuid'] = $variables['node']->uuid();
}

/**
 * Adds datalayer variables to the html head and drupalSettings.
 *
 * @param array $build
 * @param string $key
 * @param array $variables
 */
function infinite_datalayer_add(&$build, $key, $variables) {
  $datalayer_object = json_encode($variables, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

  $build['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => ['type' => 'text/javascript'],
      '#value' => "dataLayer = [$datalayer_object];",
    ],
    'datalayer',
  ];
  $build['#attached']['library'][] = 'core/drupalSettings';
  $build['#attached']['drupalSettings']['datalayer'][$key] = $variables;
}

/**
 * Returns data layer object initialized with common data.
 *
 * @return array
 */
function _infinite_datalayer_initialize_variables() {
  return [
    'environment' => [
      'systemType' => isset($_ENV['AH_SITE_ENVIRONMENT']) ? $_ENV['AH_SITE_ENVIRONMENT'] : 'local',
      'isLoggedIn' => \Drupal::currentUser()->isAuthenticated(),
    ],
    'page' => [],
  ];
}

/**
 * Returns an ordered set of labels for eligible paragraphs.
 *
 * @param EntityInterface $entity
 *
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _infinite_datalayer_content_sub_types(EntityInterface $entity) {
  $content_sub_types = [];

  if ($entity->hasField('field_sponsor_type')
    && $entity->field_sponsor_type->value == 'native'
    && isset($entity->field_campaign->entity)) {
    $content_sub_types[] = 'NativeArticle';
  }

  if ($entity->hasField('field_paragraphs')) {
    foreach ($entity->field_paragraphs->referencedEntities() as $paragraph) {
      if (in_array($paragraph->bundle(), ['gallery', 'instagram', 'pinterest', 'products', 'riddle', 'spotlight', 'text', 'twitter'])) {
        $content_sub_types[] = Unicode::ucfirst($paragraph->bundle());
      }
      elseif ($paragraph->bundle() === 'seo_links') {
        $content_sub_types[] = 'SEO Links';
      }
      elseif ($paragraph->bundle() == 'media' && isset($paragraph->field_media->entity)) {
        $content_sub_types[] = Unicode::ucfirst($paragraph->field_media->entity->bundle());
      }
      elseif ($paragraph->bundle() == 'advertising_products_paragraph') {
        foreach ($paragraph->field_advertising_products->referencedEntities() as $product) {
          _infinite_datalayer_advertising_products_sup_types_helper($content_sub_types, $product);
        }
      }
      elseif($paragraph->bundle() == 'ecommerce_look') {
        /** @var \Drupal\imagepin\WidgetRepository $widget_repository */
        $widget_repository = \Drupal::service('imagepin.widget_repository');
        $product_storage = Drupal::entityTypeManager()->getStorage('advertising_product');

        $content_sub_types[] = 'Ecommerce Look';
        $looks = $paragraph->field_look->referencedEntities();
        foreach ($looks as $look) {
          $look_medias = $look->field_teaser_media->referencedEntities();

          /** @var \Drupal\media_entity\MediaInterface $look_media */
          foreach ($look_medias as $look_media) {
            /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_mode */
            $view_mode = \Drupal::entityTypeManager()
              ->getStorage('entity_view_display')
              ->load($look_media->getEntityTypeId() . '.' . $look_media->bundle() . '.look');

            if(isset($view_mode->get('content')['field_image']['third_party_settings']['imagepin'])) {
              $imagepin_sttings = $view_mode->get('content')['field_image']['third_party_settings']['imagepin'];
              if($imagepin_sttings['pinable']) {
                $look_files = $widget_repository->loadForEntityFieldView($look_media, 'field_image', 'look');
                foreach ($look_files as $fid => $look_file) {
                  foreach ($look_file as $widget_key => $widget_data) {
                    foreach (['product', 'product2'] as $product_variant) {
                      if(isset($widget_data['value'][$product_variant])) {
                        $product = $product_storage->load($widget_data['value'][$product_variant]);
                        _infinite_datalayer_advertising_products_sup_types_helper($content_sub_types, $product);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  sort($content_sub_types);

  return array_values(array_unique($content_sub_types));
}

function _infinite_datalayer_advertising_products_sup_types_helper(&$content_sub_types, $product) {
  switch ($product->bundle()) {
    case 'advertising_product_generic':
      $content_sub_types[] = 'Affiliate-Generic';
      break;
    case 'advertising_product_amazon':
      $content_sub_types[] = 'Affiliate-Amazon';
      break;
    case 'advertising_product_tipser':
      $content_sub_types[] = 'Affiliate-Tipser';
      break;
    case 'advertising_product_tracdelight':
      $content_sub_types[] = 'Affiliate-Tracdelight';
      break;
    default:
      $content_sub_types[] = 'Affiliate-Undefined';
  }
}

/**
 * Returns category and sub category derived from the given term.
 *
 * @param Term $term
 *   A channel term
 *
 * @return array
 *   An associative array with category and optional subCategory
 */
function _infinite_datalayer_category(Term $term) {
  $category = [];
  $parents = Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($term->id());

  switch (count($parents)) {
    case 1:
      // The category should be Home or the second level of the channel
      // hierarchy. If the term is in the third level of the hierarchy or
      // deeper the second level of the hierarchy should be the category and
      // the term itself the sub category.
      //
      // Note: The array returned by TermStorage::loadAllParents also contains
      // the term itself and is ordered by term weight, hence the first level
      // term is in the last position.
    case 2:
      $category['category'] = $term->name->value;
      break;
    default:
      $parent = array_values($parents)[count($parents) - 2];
      $category['category'] = $parent->name->value;
      $category['subCategory'] = $term->name->value;
      break;
  }

  return $category;
}

/**
 * Helper function to get datalayer enabled view modes.
 *
 * @param bool $entityType
 *
 * @return array|bool|mixed
 */
function infinite_datalayer_get_datalayer_view_modes($entityType = FALSE) {
  $datalayerViewModes = [
    'node'          => ['full', 'lazyloading'],
    'taxonomy_term' => ['default', 'paragraphs_only'],
    'user'          => ['default'],
  ];

  if (!$entityType) {
    return $datalayerViewModes;
  }
  else if (isset($datalayerViewModes[$entityType])) {
    return $datalayerViewModes[$entityType];
  }
  return FALSE;
}

/**
 * Implements template_preprocess_amp_analytics().
 *
 * Add datalayer variable to amp-analytics--googleanalytics.html.tiwg file.
 */
function infinite_datalayer_preprocess_amp_analytics__googleanalytics(&$variables) {
  $datalayer = NULL;

  // Get node, taxonomy_term or user entity from route.
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $node instanceof NodeInterface) {
    $datalayer = infinite_datalayer_get_variables($node, 'full');
  }
  else if (($term = \Drupal::routeMatch()->getParameter('taxonomy_term')) && $term instanceof TermInterface) {
    $datalayer = infinite_datalayer_get_variables($term, 'default');
  }
  else if (($user = \Drupal::routeMatch()->getParameter('user')) && $user instanceof UserInterface) {
    $datalayer = infinite_datalayer_get_variables($user, 'default');
  }
  $variables['datalayer'] = $datalayer;
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function infinite_datalayer_node_presave(EntityInterface $entity) {
  infinite_datalayer_set_content_sub_types_field($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for taxonomy_term entities.
 */
function infinite_datalayer_taxonomy_term_presave(EntityInterface $entity) {
  infinite_datalayer_set_content_sub_types_field($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for user entities.
 */
function infinite_datalayer_user_presave(EntityInterface $entity) {
  infinite_datalayer_set_content_sub_types_field($entity);
}

function infinite_datalayer_set_content_sub_types_field(EntityInterface $entity) {
  if ($entity->hasField('field_content_sub_types')) {
    unset($entity->field_content_sub_types);
    $contentSubTypes = _infinite_datalayer_content_sub_types($entity);
    foreach ($contentSubTypes as $contentSubType) {
      $entity->field_content_sub_types[] = ['value' => $contentSubType];
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns allowed values for Content Sub Types field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 * @param \Drupal\Core\Entity\FieldableEntityInterface|NULL $entity
 * @param bool $cacheable
 *
 * @return array
 *   List of allowed datalayer content sub types.
 */
function infinite_datalayer_allowed_content_sub_types(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $contentSubTypes = [
    'undefined' => 'Undefined',
    'advertising_product_amazon' => 'Affiliate-Amazon',
    'advertising_product_generic' => 'Affiliate-Generic',
    'advertising_product_tipser' => 'Affiliate-Tipser',
    'advertising_product_tracdelight' => 'Affiliate-Tracdelight',
    'advertising_product_undefined' => 'Affiliate-Undefined',
    'media_file' => 'File',
    'media_image' => 'Image',
    'media_nexx_video' => 'Nexx Video',
    'media_video' => 'Video',
    'native'  => 'NativeArticle',
    'paragraph_ecommerce_look' => 'Ecommerce Look',
    'paragraph_gallery' => 'Gallery',
    'paragraph_instagram' => 'Instagram',
    'paragraph_pinterest' => 'Pinterest',
    'paragraph_products' => 'Products',
    'paragraph_riddle' => 'Riddle',
    'paragraph_seo_links' => 'SEO Links',
    'paragraph_spotlight' => 'Spotlight',
    'paragraph_text' => 'Text',
    'paragraph_twitter' => 'Twitter',
  ];

  // We use here the array flip because GraphQL only shows keys.
  return array_flip($contentSubTypes);
}
