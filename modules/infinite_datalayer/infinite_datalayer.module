<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 * Enriches data layer with information about nodes and terms.
 */

/**
 * Implements hook_entity_view().
 */
function infinite_datalayer_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entity_type = $entity->getEntityTypeId();
  $entity_bundle = $entity->bundle();
  $entity_id = $entity->id();
  $entity_uuid = $entity->uuid();
  $label = $entity->label();

  if(!in_array($entity_type, ['taxonomy_term', 'user', 'node'])) {
    return;
  }

  $datalayer_variables = _infinite_datalayer_initialize_variables();

  $datalayer_variables['page'] = [
    'name' => $label,
    'entityType' => $entity_type,
    'contentType' => $entity_bundle,
    'entityID' => $entity_id,
  ];
  $key = $entity_uuid;

  $alter_hooks = [
    'infinite_datalayer_entity',
    'infinite_datalayer_' . $entity_type,
    'infinite_datalayer_' . $entity_type . '_' . $entity_bundle
  ];
  $context = [
    'key' => $key,
    'entity' => $entity,
    'view_mode' => $view_mode
  ];
  \Drupal::moduleHandler()->alter($alter_hooks, $build, $datalayer_variables, $context);

  if($datalayer_variables){
    infinite_datalayer_add($build, $context['key'], $datalayer_variables);
  }

}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_node_alter(&$build, &$datalayer_variables, $context) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $context['entity'];
  $datalayer_variables_page = &$datalayer_variables['page'];
  $datalayer_variables_page['authorName'] = $node->getOwner()->getDisplayName();

  if(!in_array($context['view_mode'], ['full', 'lazyloading'])){
    $datalayer_variables = FALSE;
    return;
  }

  if($content_sub_type = _infinite_datalayer_content_sub_types($node)){
    $datalayer_variables_page['contentSubType'] = $content_sub_type;
  }

  if($node->hasField('field_channel')){
    if (isset($node->field_channel->entity)) {
      $datalayer_variables_page += _infinite_datalayer_category($node->field_channel->entity);
    }
  }

  if($node->bundle() == 'article'){
    $datalayer_variables_page['articlePublishDate'] = date(DATE_ISO8601, $node->created->value);

    if (\Drupal::request()->attributes->get('js') == 'ajax') {
      $context['key'] = $node->uuid();
    }
    else {
      $context['key'] = 'page';
    }
  }
  else {
    $datalayer_variables_page['publishDate'] = date(DATE_ISO8601, $node->created->value);
  }

}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_taxonomy_term_alter(&$build, &$datalayer_variables, $context) {
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $context['entity'];
  if ($context['view_mode'] == 'amp' || !taxonomy_term_is_page($term) && $context['view_mode'] != 'paragraphs_only' ) {
    $datalayer_variables = FALSE;
    return;
  }

  if ($term->bundle() == 'channel') {
    $datalayer_variables['page'] += _infinite_datalayer_category($term);
  }
  $context['key'] = 'page';
}

/**
 * Implements hook_infinite_datalayer_TYPE_alter().
 */
function infinite_datalayer_infinite_datalayer_user_alter(&$build, &$datalayer_variables, $context) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $context['entity'];
  if ($context['view_mode'] == 'amp' ||
    \Drupal::routeMatch()->getRouteName() != 'entity.user.canonical' ||
    \Drupal::routeMatch()->getParameter('user')->id() != $user->id()
  ) {
    $datalayer_variables = FALSE;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function infinite_datalayer_preprocess_node(&$variables) {
  $variables['uuid'] = $variables['node']->uuid();
}

/**
 * Adds datalayer variables to the html head and drupalSettings.
 *
 * @param array $build
 * @param string $key
 * @param array $variables
 */
function infinite_datalayer_add(&$build, $key, $variables) {
  $datalayer_object = json_encode($variables, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

  $build['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => ['type' => 'text/javascript'],
      '#value' => "dataLayer = [$datalayer_object];",
    ],
    'datalayer',
  ];
  $build['#attached']['library'][] = 'core/drupalSettings';
  $build['#attached']['drupalSettings']['datalayer'][$key] = $variables;
}

/**
 * Returns data layer object initialized with common data.
 *
 * @return array
 */
function _infinite_datalayer_initialize_variables() {
  return [
    'environment' => [
      'systemType' => isset($_ENV['AH_SITE_ENVIRONMENT']) ? $_ENV['AH_SITE_ENVIRONMENT'] : 'local',
      'isLoggedIn' => \Drupal::currentUser()->isAuthenticated(),
    ],
    'page' => [],
  ];
}

/**
 * Returns an ordered set of labels for eligible paragraphs.
 *
 * @param Node $node
 *
 * @return array
 */
function _infinite_datalayer_content_sub_types(Node $node) {
  $content_sub_types = [];

  if ($node->hasField('field_sponsor_type')
    && $node->field_sponsor_type->value == 'native'
    && isset($node->field_campaign->entity)) {
    $content_sub_types[] = 'NativeArticle';
  }

  if ($node->hasField('field_paragraphs')) {
    foreach ($node->field_paragraphs->referencedEntities() as $paragraph) {
      if (in_array($paragraph->bundle(), ['gallery', 'instagram', 'nexx_video', 'pinterest', 'riddle', 'twitter'])) {
        $content_sub_types[] = Unicode::ucfirst($paragraph->bundle());
      }
      elseif ($paragraph->bundle() == 'media' && isset($paragraph->field_media->entity)) {
        $content_sub_types[] = Unicode::ucfirst($paragraph->field_media->entity->bundle());
      }
      elseif ($paragraph->bundle() == 'tracdelight') {
        $content_sub_types[] = 'Affiliate-Tracdelight';
      }
      elseif ($paragraph->bundle() == 'advertising_products_paragraph') {
        foreach ($paragraph->field_advertising_products->referencedEntities() as $product) {
          switch ($product->bundle()) {
            case 'advertising_product_generic':
              $content_sub_types[] = 'Affiliate-Generic';
              break;
            case 'advertising_product_amazon':
              $content_sub_types[] = 'Affiliate-Amazon';
              break;
            case 'advertising_product_tracdelight':
              $content_sub_types[] = 'Affiliate-Tracdelight';
              break;
          }
        }
      }
    }
  }

  sort($content_sub_types);

  return array_values(array_unique($content_sub_types));
}

/**
 * Returns category and sub category derived from the given term.
 *
 * @param Term $term
 *   A channel term
 *
 * @return array
 *   An associative array with category and optional subCategory
 */
function _infinite_datalayer_category(Term $term) {
  $category = [];
  $parents = Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($term->id());

  switch (count($parents)) {
    case 1:
      // The category should be Home or the second level of the channel
      // hierarchy. If the term is in the third level of the hierarchy or
      // deeper the second level of the hierarchy should be the category and
      // the term itself the sub category.
      //
      // Note: The array returned by TermStorage::loadAllParents also contains
      // the term itself and is ordered by term weight, hence the first level
      // term is in the last position.
    case 2:
      $category['category'] = $term->name->value;
      break;
    default:
      $parent = array_values($parents)[count($parents) - 2];
      $category['category'] = $parent->name->value;
      $category['subCategory'] = $term->name->value;
      break;
  }

  return $category;
}
