<?php

use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_file_validate().
 */
function infinite_media_file_validate(FileInterface $file) {
	$errors = [];

	// Apply 'upload' image style on temporary image files.
	if ($file->isTemporary() && in_array($file->getMimeType(), ['image/gif', 'image/jpeg', 'image/png'])) {
		$image_style_name = 'upload';
		$image_style = ImageStyle::load($image_style_name);
		if ($image_style === NULL) {
			$errors[] = t("The image style %image_style to be applied on the uploaded image does not exist.", ['%image_style' => $image_style_name]);
		}
		else {
			$derived_uri = $file->getFileUri() . '.derived';
			if (!$image_style->createDerivative($file->getFileUri(), $derived_uri)) {
				$errors[] = t('The uploaded image could not be processed with style %image_style. The image file may be invalid.', ['%image_style' => $image_style_name]);
			}
			else {
				if (file_unmanaged_move($derived_uri, $file->getFileUri(), FILE_EXISTS_REPLACE) === FALSE) {
					$errors[] = t('An error occurred while saving the uploaded image file.');
				}
			}
		}
	}

	return $errors;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function infinite_media_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $style_name = $variables['style_name'];
  if ($style_name === NULL) {
    $style_name = 'default';
  }
  $suggestions[] = 'image__' . $style_name;
}

/**
 * Implements hook_preprocess_media().
 */
function infinite_media_preprocess_media(&$variables) {

  // todo: later possible switch to media URL for sharing media items.
  $current_url = Url::fromRoute('<current>');
  if ($node = \Drupal::routeMatch()->getParameter('node')) {  // Handling for lazy loading node URLs.
    $alias_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->id());
    $absolute_url = Url::fromUri('base:/' . $alias_path, array('absolute' => TRUE));
  }
  else if ($current_url->toString() != '/') {
    $absolute_url = Url::fromUri('base:/' . $current_url->toString(), array('absolute' => TRUE));
  }
  else {
    $absolute_url = Url::fromRoute('<front>', array('absolute' => TRUE));  // Extra handling for <front>.
  }
  $variables['absolute_node_url'] = $absolute_url->toString();

  /* @var Media $media */
  $media = $variables['elements']['#media'];
  $variables['media_type'] = $media->bundle();
  $variables['media_id'] = $media->id();

  if ($media->bundle() === 'image') {

    // Get image dimension.
    // todo: is this really the right way?
    /* @var Image $image */
    if (!$media->field_image->isEmpty() && $media->field_image->entity) {
      $image_url = $media->field_image->entity->getFileUri();
      $image = \Drupal::service('image.factory')->get($image_url);
      if ($image->isValid()) {
        $variables['calculated_dimension'] = _infinite_media_image_dimension($image->getHeight(), $image->getWidth());

        if (theme_get_setting('share_image_style')) {
          /* @var ImageStyle $share_img */
          $share_img = ImageStyle::load(theme_get_setting('share_image_style'));
          if(is_object($share_img)) {
            $variables['share_img_url'] = $share_img->buildUrl($image_url);
          }
        }
      }
    }
  }
  else if ($media->bundle() === 'file') {
    if (!$media->field_file->isEmpty()) {
      $file_uri = $media->field_file->entity->getFileUri();
      $variables['file_url'] = file_create_url($file_uri);
    }
  }
  else if ($media->bundle() === 'video') {
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function infinite_media_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'infinite_browser') {
    $variables['view_array']['#attached']['library'][] = 'infinite_media/entity_browser_view';
    $variables['view_array']['#attached']['library'][] = 'thunder_media/entity_browser_view';
  }
}



/**
 * Implements hook_views_data_alter().
 */
function infinite_media_views_data_alter(&$data) {
  $data['media_field_data']['term_node_tid_depth'] = [
    'help' => t('Display content if it has the selected taxonomy terms, or children of the selected terms. Due to additional complexity, this has fewer options than the versions without depth.'),
    'real field' => 'mid',
    'argument' => [
      'title' => t('Has taxonomy term ID (with depth)'),
      'id' => 'taxonomy_index_tid_depth',
      'accept depth modifier' => TRUE,
    ],
    'filter' => [
      'title' => t('Has taxonomy terms (with depth)'),
      'id' => 'taxonomy_index_tid_depth',
    ],
  ];

}

/**
 * Helper function for getting dimension of an image.
 */
function _infinite_media_image_dimension($height, $width) {
  // todo: should we handle square?
  if ($height < $width) {
    return 'landscape';
  }
  else {
    return 'portrait';
  }
}
