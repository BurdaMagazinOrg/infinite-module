<?php

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;

function infinite_ad_entity_theme_registry_alter(&$theme_registry){
  $hook = 'ad_integration_preprocess_views_view_row_fia';
  $preprocess_functions = &$theme_registry['views_view_row_fia']['preprocess functions'];
  $i = array_search($hook, $preprocess_functions);
  if($i !== FALSE){
    unset($preprocess_functions[$i]);
  }
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function infinite_ad_entity_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  /** @var FieldableEntityInterface $entity */
  if($entity instanceof FieldableEntityInterface
    && $entity->hasField('field_header_blocks')
    && !$entity->get('field_header_blocks')->isEmpty()){

    /** @var \Drupal\Core\Theme\ActiveTheme $theme */
    $theme = \Drupal::service('theme.manager')->getActiveTheme();
    $base_themes = $theme->getBaseThemes();

    if(array_key_exists('infinite_amp', $base_themes)) {
      // Replace defined ad blocks by the corresponding amp ad blocks.
      $header_blocks = $entity->get('field_header_blocks')->getValue();
      foreach ($header_blocks as $key => &$header_block) {
        $block = \Drupal::entityTypeManager()
          ->getStorage('block')
          ->load($header_block['target_id']);

        if(isset($block) && $block->getPlugin() == 'ad_entity_block') {

          $replacement_block_id = $header_block['target_id'] . '_amp';
          $replacement_block = \Drupal::entityTypeManager()
            ->getStorage('block')
            ->load($replacement_block_id);

          if(isset($replacement_block)){
            $header_block['target_id'] = $replacement_block_id;
          }
          else {
            unset($header_blocks[$key]);
          }

        }
      }
      $entity->set('field_header_blocks', $header_blocks);
    }

  }

}

function infinite_ad_entity_preprocess_views_view_row_fia(&$variables) {
  /** @var \Drupal\ad_entity\Plugin\AdContextManager $context_manager */
  if ($context_manager = \Drupal::service('ad_entity.context_manager')) {
    /** @var \Drupal\views\ResultRow $row */
    $row = $variables['options']['row'];
    $entity = $row->_entity;
    $context_manager->resetContextDataForEntity($entity);

    $ad_entity = \Drupal::entityTypeManager()
      ->getStorage('ad_entity')
      ->load('adtech_facebook_instant_article');
    $view_builder = \Drupal::entityTypeManager()
      ->getViewBuilder($ad_entity->getEntityTypeId());
    $variables['options']['automatic_ad'] = $view_builder->view($ad_entity);

    // Reset to previous context data state (if any).
    $variables['options']['automatic_ad']['#post_render'][] = '_ad_entity_reset_to_previous_context_data';
  }
}

function infinite_ad_entity_theme_suggestions_ad_entity_alter(array &$suggestions, array $variables, $hook){
  $suggestions[] = $hook . '__' . $variables['ad_entity']->id();
}


function infinite_ad_entity_preprocess_ad_entity(&$vars){
  if ($vars['container'] == 'html') {
    _infinite_ad_entity_filter_main_channel($vars);
  }
}

function infinite_ad_entity_preprocess_adtech_iframe(&$vars) {
  _infinite_ad_entity_filter_main_channel($vars);
}

/**
 * Convert targeting channel from array to string
 *
 * @param $vars
 *   Template variables.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _infinite_ad_entity_filter_main_channel(&$vars) {
  /** @var \Drupal\ad_entity\Entity\AdEntity $ad_entity */
  $ad_entity = $vars['ad_entity'];

  // Only convert for adtech ad entities and html containers.
  if ($ad_entity->get('type_plugin_id') == 'adtech_factory') {

    /** @var \Drupal\ad_entity\TargetingCollection $targeting_collection */
    $targeting_collection = $ad_entity->getTargetingFromContextData();

    if (!$targeting_collection->isEmpty()) {
      list($entity_type,) = explode('/', $targeting_collection->get('entitytype'));
      /** @var \Drupal\Core\Entity\EntityRepository $entity_repo */
      $entity_repo = \Drupal::service('entity.repository');
      $entity = $entity_repo->loadEntityByUuid($entity_type, $targeting_collection->get('entityuuid'));

      $targeting_channel = $targeting_collection->get('channel');
      if(isset($targeting_channel) && is_array($targeting_channel) && $entity->hasField('field_channel')) {
        $channel_term = $entity->get('field_channel')->referencedEntities()[0];
        $ad_context_item = $channel_term->get('field_ad_context')->first();
        if(isset($ad_context_item)) {
          $ad_context = $ad_context_item->getValue();
          $channel_term_channel = NestedArray::getValue($ad_context, ['context', 'context_settings', 'targeting', 'targeting', 'channel']);
          if(isset($channel_term_channel)) {
            $targeting_collection->set('channel', $channel_term_channel);
            $vars['targeting'] = $targeting_collection->toJson();
          }
        }
      }
    }
  }
}

function infinite_ad_entity_preprocess_dfp_amp(&$vars){

  if(isset($vars['json']['targeting']['channel'])) {
    $targeting = $vars['json']['targeting'];
    $channel = is_array($targeting['channel']) ? reset($targeting['channel']) : $targeting['channel'];
    $channel = str_replace('homepage/', '', $channel);
    unset($targeting['channel']);
    $vars['json']['targeting'] = $targeting;

    /** @var Drupal\Core\Template\Attribute $attributes */
    $attributes = &$vars['attributes'];
    $attributes['data-slot'] = str_replace('/amp', '/' . $channel, $attributes['data-slot']);
  }

}
