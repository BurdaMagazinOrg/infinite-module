<?php

/**
 * @file
 * Primarily Drupal hooks functions to manipulate Odoscope views.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;


/**
 * Implements hook_library_info_alter().
 */
function infinite_odoscope_library_info_alter(&$libraries, $extension) {
  if (isset($libraries['odoscope.main'])) {
    if (file_exists('public://odoscope/odoscope.main.js')) {
      $date = date("Y:m:d-H:i:s", filemtime('public://odoscope/odoscope.main.js'));
      $libraries['odoscope.main']['js']['/sites/default/files/odoscope/odoscope.main.js']['attributes']['date'] = $date;
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function infinite_odoscope_views_data_alter(array &$data) {
  foreach ($data as $base_table => $field) {
    if (isset($data[$base_table]['rendered_entity'])) {
      $data[$base_table]['rendered_entity_base64'] = [
        'field' => [
          'title' => t('Rendered entity in base 64'),
          'help' => t('Renders an entity in a view mode and encodes the result in base 64.'),
          'id' => 'rendered_entity_base64',
        ],
      ];
    }
  }
  return $data;
}

/**
 * Implements hook_views_pre_render().
 */
function infinite_odoscope_views_pre_render(ViewExecutable $view) {
  if (isset($view) &&
      ($view->id() == 'infinite_taxonomy_term') &&
      ($view->getDisplay()->display['id'] == 'front' || $view->getDisplay()->display['id'] == 'channel')
  ) {
    $view->element['#attached']['library'][] = 'infinite_odoscope/odoscope.head';
    $view->element['#attached']['library'][] = 'infinite_odoscope/odoscope.manager';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function infinite_odoscope_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'article' && $build['#view_mode'] == 'full') {
    $build['#attached']['library'][] = 'infinite_odoscope/odoscope.head';
    $build['#attached']['library'][] = 'infinite_odoscope/odoscope.manager';
    $build['#attached']['library'][] = 'infinite_odoscope/odoscope.article';
  }
}


/**
 * Implements hook_entity_insert().
 */
function infinite_odoscope_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'article') {
    return;
  }

  /** @var QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var QueueInterface $queue */
  $queue = $queue_factory->get('OdoscopeUpdater');
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->action = 'create';
  $queue->createItem($item);
}

/**
 * Implements hook_entity_update().
 */
function infinite_odoscope_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'article') {
    return;
  }

  /** @var QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var QueueInterface $queue */
  $queue = $queue_factory->get('OdoscopeUpdater');
  // Note: we do not care if duplicate items end up in the queue.
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->action = 'update';
  $queue->createItem($item);
}

/**
 * Implements hook_entity_delete().
 */
function infinite_odoscope_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'article') {
    return;
  }

  /** @var QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var QueueInterface $queue */
  $queue = $queue_factory->get('OdoscopeUpdater');
  // Note: we do not care if duplicate items end up in the queue.
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->action = 'delete';
  $queue->createItem($item);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function infinite_odoscope_preprocess_html(&$variables) {
  $config = Drupal::config('infinite_odoscope.settings');
  $variables['odoscope_enabled'] = $config->get('odoscope_enabled');

  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('infinite_odoscope')->getPath();

  $library_source_path = str_replace(file_create_url(''), '/', file_create_url('public://odoscope/odoscope.main.js'));
  $loader_js = file_get_contents($module_path . '/js/utils/loader.js');
  $loader_js = strtr($loader_js, ['%TARGET_SCRIPT_PATH%' => $library_source_path]);
  $variables['odoscope_loader'] = $loader_js;


  /** @var \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery */
  $library_discovery = \Drupal::service('library.discovery');

  $libraries = $library_discovery->getLibrariesByExtension('infinite_odoscope');

  $variables['odoscope_cache_buster'] = 'not_set';
  $variables['odoscope_file'] = '/' . $libraries['odoscope.main']['js'][0]['data'];
  if (isset($libraries['odoscope.main']['js'][0]['attributes']['date'])) {
    $variables['odoscope_cache_buster'] = $libraries['odoscope.main']['js'][0]['attributes']['date'];
  }
}

/**
 * @param string $source
 *  the URL of the odoscope library. If source starts with http://
 *   a http call is made and the response body is written to target
 *   otherwise the source will be written to target as is.
 * @param string $target
 *  the URI of the file where to store the source code e.g.
 *   public://odoscope/odoscope.main.js
 *
 * @return bool
 *  true on success otherwise false or exception
 */
function infinite_odoscope_update_library_source($source, $target){

  if(preg_match('/^https?:\/\//', $source)) {
    $client = Drupal::httpClient();
    $response = $client->get($source);
    if($response->getStatusCode() != 200) {
      return FALSE;
    }
    $response_body = $response->getBody()->getContents();
  }
  else {
    $response_body = $source;
  }

  file_put_contents($target, $response_body);
  return TRUE;
}

/**
 * Implements hook_cron().
 */
function infinite_odoscope_cron() {
  // find and delete archived odoscope uploads that are older than 30 days.
  $database = \Drupal::database();
  $query = $database->select('file_managed', 'f');
  $cond1 = $query->condition('uri', db_like('private://odoscope-archive/') . '%', 'LIKE');
  $cond2 = $query->condition('created', REQUEST_TIME - 30 * 24 * 60 * 60, '<');
  $query->fields('f', ['fid']);
  $results = $query->execute()->fetchAll();
  foreach ($results as $result) {
    file_delete($result->fid);
  }
}

/**
 * Callback function for the #post_render array.
 *
 * @param (string) $markup
 *
 * @return (string) base64 encoded markup
 */
function infinite_odoscope_base64_postrender($markup) {
  return base64_encode($markup);
}
