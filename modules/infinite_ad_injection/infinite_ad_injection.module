<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Markup;
use Symfony\Component\CssSelector\CssSelector;
use Symfony\Component\DomCrawler\Crawler;

function infinite_ad_injection_entity_display_build_alter(&$build, $context) {
  return;
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_ad_injection_preprocess_views_view_unformatted(&$variables) {
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Place dynamic blocks in taxonomy term stream from 'Dynamic blocks for taxonomy terms' region.
  if ($view->id() == 'infinite_taxonomy_term' && $dyn_blocks = _infinite_blocks_get_dyn_region_blocks(['dyn_blocks_taxonomy_term'])) {

    // Check for first 5 teasers from attachment.
    if ($view->pager->current_page === NULL) {
      $render_dyn_block_key = 0;
    }
    else {
      $render_dyn_block_key = $view->pager->current_page + 1;
    }

    if(Drupal::moduleHandler()->moduleExists('ad_entity')){
      $i = $render_dyn_block_key % count($dyn_blocks);
    }
    else {
      $i = $render_dyn_block_key;
    }

    $inject_after = 3;

    // Add block when one exists from block ordering of region.
    if (isset($dyn_blocks[$i])) {

      // Get render array of dynamic block.
      $block_content = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($dyn_blocks[$i]);

      // Place dynamic block after 3rd teaser.
      $dyn_block_row[] = ['content' => $block_content];
      array_splice($variables['rows'], $inject_after, 0, $dyn_block_row);
    }
  }
}

function infinite_ad_injection_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $view_modes = ['full'];
  if(Drupal::moduleHandler()->moduleExists('ad_entity')){
    $view_modes[] = 'lazyloading';
    $view_modes[] = 'amp';
  }

  if($entity->bundle() == 'article' && in_array($build['#view_mode'], $view_modes)){
    $build['#post_render'][] = 'infinite_ad_injection_article_inject_content';
  }
}

function infinite_ad_injection_article_inject_content($children, $elements){
  $contents = infinite_ad_injection_get_content();
//  $contents = infinite_ad_injection_get_content__dummy();
  $contents_count = count($contents);

  if($contents_count > 0) {
    $selectors = [];
    $selectors[] = CssSelector::toXPath('article div.item-paragraph:not(.item-paragraph--text)');
    $selectors[] = CssSelector::toXPath('article div.item-paragraph--text p');
    $slelector = implode('|', $selectors);

    $crawler = new Crawler();

    // loading the html here instead of passing it into the constructor
    // prevents problems with the charset
    $crawler->addHtmlContent($children . '');
    $fragments = $crawler->filterXPath($slelector);

    // Rules: first ad is injected after the 2nd element, than after each 6th element
    $i = 0;
    $first = 1;
    $each = 6;
    foreach ($fragments as $f) {
      if($i == $first || $i % $each == $first){
        $class = trim($f->getAttribute('class') . ' pread pread-' . $i);
        $f->setAttribute('class', $class);
      }
      $i++;
    }

    libxml_use_internal_errors(TRUE);
    $qp = html5qp($crawler);
    $qp->find('article .pread')
      ->each(function($i, $e) use ($contents, $contents_count){
      if($content = $contents[$i % $contents_count]){
        // Wrapping is required because querypath creates a whole valid html structure
        // qp('<div>some content</div>') -> <html><head></head><body><div>some content</div></body></html>
        // qp('<script src="..."></script>') -> <html><head><script src="..."></script></head></html>
        $content_wrapped =  '<div class="ad-injct-wrpr">'.$content.'</div>';
        $content_inner = qp($content_wrapped)->find('body div.ad-injct-wrpr')->innerHTML();
        qp($e)->removeClass('pread')->after($content_inner);
      }
    });
    libxml_clear_errors();

    $html = $qp->find('body')->innerHtml5();
    $markup = Markup::create($html);
    return $markup;
  }

  return $children;
}

function infinite_ad_injection_get_content__dummy(){
  $contents = [];
  $contents[] = '<script src="//a.teads.tv/page/66057/tag" async="true"></script>';
  $contents[] = '<div style="background-color: #f00">Mautz 1</div>';
  $contents[] = '<div style="background-color: #0f0">Mautz 2</div>';
  $contents[] = '<div style="background-color: #00f">Mautz 3</div>';
  return $contents;
}

function infinite_ad_injection_get_content(){
  $contents = [];

  $blocks = _infinite_blocks_get_dyn_region_blocks(['dyn_blocks_node']);
  foreach ($blocks as $id => $block) {
    $block_view = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);

    $block_render = trim((string)\Drupal::service('renderer')->render($block_view));
    if(strlen($block_render)){
      $contents[] = (string)$block_render;
    }
  }

  return $contents;
}