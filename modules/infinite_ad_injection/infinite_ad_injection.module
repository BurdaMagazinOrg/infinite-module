<?php

use Drupal\Component\Render\MarkupInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Markup;
use Drupal\infinite_ad_injection\AdInjectionContentInjection;
use Symfony\Component\CssSelector\CssSelectorConverter;
use Symfony\Component\DomCrawler\Crawler;

function infinite_ad_injection_entity_display_build_alter(&$build, $context)
{
  return;
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_ad_injection_preprocess_views_view_unformatted(&$variables)
{
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Place dynamic blocks in taxonomy term stream from 'Dynamic blocks for taxonomy terms' region.
  if (
    $view->id() === 'infinite_taxonomy_term' &&
    $view->current_display !== 'show_more_stream' &&
    $dyn_blocks = infinite_ad_injection_get_content(['dyn_blocks_taxonomy_term_stream'], FALSE)
  ) {

    // Check for first 5 teasers from attachment.
    if ($view->pager->current_page === NULL) {
      $render_dyn_block_key = 0;
    } else {
      $render_dyn_block_key = $view->pager->current_page + 1;
    }

    if (Drupal::moduleHandler()->moduleExists('ad_entity')) {
      $i = $render_dyn_block_key % count($dyn_blocks);
    } else {
      $i = $render_dyn_block_key;
    }

    $inject_after = 3;

    // Add block when one exists from block ordering of region.
    if (isset($dyn_blocks[$i])) {
      // Place dynamic block after 3rd teaser.
      $dyn_block_row[] = ['content' => $dyn_blocks[$i]];
      array_splice($variables['rows'], $inject_after, 0, $dyn_block_row);
    }
  }
}

function infinite_ad_injection_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{
  $view_modes = ['full'];
  if (Drupal::moduleHandler()->moduleExists('ad_entity')) {
    $view_modes[] = 'lazyloading';
    $view_modes[] = 'amp';
  }

  if ($entity->bundle() == 'article' && in_array($build['#view_mode'], $view_modes)) {
    $build['#post_render'][] = 'infinite_ad_injection_article_inject_content';
  }

  if ($entity->bundle() == 'viversum_horoscope' && in_array($build['#view_mode'], ['full'])) {
    $build['#post_render'][] = 'infinite_ad_injection_viversum_horoscope_inject_content';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function infinite_ad_injection_taxonomy_term_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{

  $view_modes = ['default', 'amp'];
  if ($entity->bundle() != 'channel' && in_array($build['#view_mode'], $view_modes)) {
    $build['#post_render'][] = 'infinite_ad_injection_term_inject_content';
  }

  return;
}

/**
 * Post render callback for term pages
 *
 * @param $children
 * @param $elements
 *
 * @return MarkupInterface|string
 */
function infinite_ad_injection_term_inject_content($children, $elements) {
  $config = Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_taxonomy_term_page']);
  if (empty($contents)) {
    return $children;
  }

  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(#steckbrief):not(.item-paragraph--spotlight)');
  $selectors[] = $cssSelector->toXPath('div.p:not(#steckbrief):not(.p--spotlight)');
  return infinite_ad_injection_inject_content(
    $children,
    $contents,
    $selectors,
    empty($config->get('first_term_ad_injection')) ? 0 : (int) $config->get('first_term_ad_injection'),
    empty($config->get('each_term_ad_injection')) ? 6 : (int) $config->get('each_term_ad_injection')
  );
}

/**
 * Post render callback for article pages
 *
 * @param $children
 * @param $elements
 *
 * @return MarkupInterface|string
 */
function infinite_ad_injection_article_inject_content($children, $elements) {
  $config = Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_node']);
  if (empty($contents)) {
    return $children;
  }

  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(.item-paragraph--text)');
  $selectors[] = $cssSelector->toXPath('div.p:not(.p--text)');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--text p');
  $selectors[] = $cssSelector->toXPath('div.p--text p');

  //this is a very bad workaround to handle the position of the first article in Freundin
  if (!empty($selectors) && $config->get('first_article_ad_injection') > 1) {
    return infinite_ad_injection_inject_content_articles(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 1 : (int) $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : (int) $config->get('each_article_ad_injection')
    );
  }elseif(!empty($selectors)) {
    return infinite_ad_injection_inject_content(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 1 : (int) $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : (int) $config->get('each_article_ad_injection')
    );
  }
  return $children;
}

/**
 * Post render callback for horoscope pages
 *
 * @param $children
 * @param $elements
 *
 * @return MarkupInterface|string
 */
function infinite_ad_injection_viversum_horoscope_inject_content($children, $elements) {
  $config = Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_node']);
  if (empty($contents)) {
    return $children;
  }
  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(.item-paragraph--text):not(.item-paragraph--viversum-zodiac)');
  $selectors[] = $cssSelector->toXPath('div.p:not(.p--text):not(.p--viversum-zodiac)');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--text p');
  $selectors[] = $cssSelector->toXPath('div.p--text p');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--viversum-zodiac p');
  $selectors[] = $cssSelector->toXPath('div.p--viversum-zodiac p');
  if (!empty($selectors)) {
    return infinite_ad_injection_inject_content(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 0 : (int) $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : (int) $config->get('each_article_ad_injection'),
      'after'
    );
  }
  return $children;
}

/**
 * Inject the ad
 *
 * @param Markup $children
 * @param array $contents
 * @param array $selectors
 * @param int $first
 * @param int $each
 * @param string $placement
 *
 * @return MarkupInterface|string
 */
function infinite_ad_injection_inject_content(Markup $children, $contents, $selectors, $first, $each, $placement = 'after') {
  $contentInjection = new AdInjectionContentInjection();
  $contentInjection->injectAds($children, $contents, $selectors, $first, $each, $placement);
  return $contentInjection->getMarkup();
}

/**
 * Specific ad injection for articles pages in Freundin
 *
 * @param Markup $children
 * @param array $contents
 * @param array $selectors
 * @param int $first
 * @param int $each
 * @param string $placement
 *
 * @return MarkupInterface|string
 */
function infinite_ad_injection_inject_content_articles($children, $contents, $selectors, $first, $each, $placement = 'after')
{
  $contentInjection = new AdInjectionContentInjection();
  $contentInjection->injectAds($children, $contents, $selectors, $first, $each, $placement);
  return $contentInjection->getMarkup();
}

function infinite_ad_injection_get_content__dummy() {
  $contents = [];
  $contents[] = '<div style="background-color: #f00">Ad injection 1</div>';
  $contents[] = '<div style="background-color: #0f0">Ad injection 2</div>';
  $contents[] = '<div style="background-color: #00f">Ad injection 3</div>';
  return $contents;
}

function infinite_ad_injection_get_content($regions = ['dyn_blocks_node'], $rendered = TRUE) {
  $contents = [];

  $blocks = _infinite_blocks_get_dyn_region_blocks($regions);
  if (isset($blocks) && is_array($blocks)) {
    foreach ($blocks as $id => $block) {
      $block_view = Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($block);

      if ($rendered) {
        $block_render = trim((string) Drupal::service('renderer')->render($block_view));
        if (strlen($block_render)) {
          $contents[] = (string)$block_render;
        }
      } else {
        $contents[] = $block_view;
      }
    }
  }

  return $contents;
}
