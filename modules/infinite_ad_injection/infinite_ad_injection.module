<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Markup;
use Symfony\Component\CssSelector\CssSelectorConverter;
use Symfony\Component\DomCrawler\Crawler;

function infinite_ad_injection_entity_display_build_alter(&$build, $context)
{
  return;
}

/**
 * Implements hook_preprocess_views().
 */
function infinite_ad_injection_preprocess_views_view_unformatted(&$variables)
{
  /* @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Place dynamic blocks in taxonomy term stream from 'Dynamic blocks for taxonomy terms' region.
  if ($view->id() == 'infinite_taxonomy_term' && $dyn_blocks = infinite_ad_injection_get_content(['dyn_blocks_taxonomy_term_stream'], FALSE)) {

    // Check for first 5 teasers from attachment.
    if ($view->pager->current_page === NULL) {
      $render_dyn_block_key = 0;
    } else {
      $render_dyn_block_key = $view->pager->current_page + 1;
    }

    if (Drupal::moduleHandler()->moduleExists('ad_entity')) {
      $i = $render_dyn_block_key % count($dyn_blocks);
    } else {
      $i = $render_dyn_block_key;
    }

    $inject_after = 3;

    // Add block when one exists from block ordering of region.
    if (isset($dyn_blocks[$i])) {
      // Place dynamic block after 3rd teaser.
      $dyn_block_row[] = ['content' => $dyn_blocks[$i]];
      array_splice($variables['rows'], $inject_after, 0, $dyn_block_row);
    }
  }
}

function infinite_ad_injection_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{
  $view_modes = ['full'];
  if (Drupal::moduleHandler()->moduleExists('ad_entity')) {
    $view_modes[] = 'lazyloading';
    $view_modes[] = 'amp';
  }

  if ($entity->bundle() == 'article' && in_array($build['#view_mode'], $view_modes)) {
    $build['#post_render'][] = 'infinite_ad_injection_article_inject_content';
  }

  if ($entity->bundle() == 'viversum_horoscope' && in_array($build['#view_mode'], ['full'])) {
    $build['#post_render'][] = 'infinite_ad_injection_viversum_horoscope_inject_content';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function infinite_ad_injection_taxonomy_term_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{

  $view_modes = ['default', 'amp'];
  if ($entity->bundle() != 'channel' && in_array($build['#view_mode'], $view_modes)) {
    $build['#post_render'][] = 'infinite_ad_injection_term_inject_content';
  }

  return;
}

/**
 * Post render callback for term pages
 *
 * @param $children
 * @param $elements
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function infinite_ad_injection_term_inject_content($children, $elements) {
  $config = \Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_taxonomy_term_page']);
  if (empty($contents)) {
    return $children;
  }

  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(#steckbrief):not(.item-paragraph--spotlight)');
  $selectors[] = $cssSelector->toXPath('div.p:not(#steckbrief):not(.p--spotlight)');
  return infinite_ad_injection_inject_content(
    $children,
    $contents,
    $selectors,
    empty($config->get('first_term_ad_injection')) ? 0 : $config->get('first_term_ad_injection'),
    empty($config->get('each_term_ad_injection')) ? 6 : $config->get('each_term_ad_injection')
  );
}

/**
 * Post render callback for article pages
 *
 * @param $children
 * @param $elements
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function infinite_ad_injection_article_inject_content($children, $elements) {
  $config = \Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_node']);
  if (empty($contents)) {
    return $children;
  }

  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(.item-paragraph--text)');
  $selectors[] = $cssSelector->toXPath('div.p:not(.p--text)');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--text p');
  $selectors[] = $cssSelector->toXPath('div.p--text p');

  //this is a very bad workaround to handle the position of the first article in Freundin
  if (!empty($selectors) && $config->get('first_article_ad_injection') > 1) {
    return infinite_ad_injection_inject_content_articles(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 1 : $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : $config->get('each_article_ad_injection')
    );
  }elseif(!empty($selectors)) {
    return infinite_ad_injection_inject_content(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 1 : $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : $config->get('each_article_ad_injection')
    );
  }
  return $children;
}

/**
 * Post render callback for horoscope pages
 *
 * @param $children
 * @param $elements
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function infinite_ad_injection_viversum_horoscope_inject_content($children, $elements) {
  $config = \Drupal::config('infinite_ad_injection.settings');
  $contents = $config->get("ad_enable_debug")>0 ? infinite_ad_injection_get_content__dummy() :
    infinite_ad_injection_get_content(['dyn_blocks_node']);
  if (empty($contents)) {
    return $children;
  }
  $cssSelector = new CssSelectorConverter();
  $selectors = [];
  $selectors[] = $cssSelector->toXPath('div.item-paragraph:not(.item-paragraph--text):not(.item-paragraph--viversum-zodiac)');
  $selectors[] = $cssSelector->toXPath('div.p:not(.p--text):not(.p--viversum-zodiac)');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--text p');
  $selectors[] = $cssSelector->toXPath('div.p--text p');

  $selectors[] = $cssSelector->toXPath('div.item-paragraph--viversum-zodiac p');
  $selectors[] = $cssSelector->toXPath('div.p--viversum-zodiac p');
  if (!empty($selectors)) {
    return infinite_ad_injection_inject_content(
      $children,
      $contents,
      $selectors,
      empty($config->get('first_article_ad_injection')) ? 0 : $config->get('first_article_ad_injection'),
      empty($config->get('each_article_ad_injection')) ? 6 : $config->get('each_article_ad_injection'),
      'after'
    );
  }
  return $children;
}

/**
 * Inject the ad
 *
 * @param array $children
 * @param array $contents
 * @param array $selectors
 * @param int $first
 * @param int $each
 * @param string $placement
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function infinite_ad_injection_inject_content($children, $contents, $selectors, $first, $each, $placement = 'after') {
  $contents_count = count($contents);
  $slelector = implode('|', $selectors);

  $crawler = new Crawler();

  // loading the html here instead of passing it into the constructor
  // prevents problems with the charset
  $crawler->addHtmlContent($children . '');
  $fragments = $crawler->filterXPath($slelector);

  // Rules: first ad is injected after the 2nd element, than after each 6th element
  $i = 0;
  foreach ($fragments as $fIndex => $f) {
    if ($i == $first || $i % $each == $first) {

      // Special handling for text / viversum paragraphs.
      if ((
        strpos($f->getAttribute('class'), 'item-paragraph--text') !== FALSE ||
        strpos($f->getAttribute('class'), 'item-paragraph--viversum-zodiac') !== FALSE
      ) || (
        strpos($f->getAttribute('class'), 'p--text') !== FALSE ||
        strpos($f->getAttribute('class'), 'p--viversum-zodiac') !== FALSE
      ) &&
        $pTags = $f->getElementsByTagName('p')
      ) {

        // Do not append ad injection if next paragraph is an advertising paragraph.
        if ($pTags->length <= ($first + 1) && $nextNode = $fragments->getNode($fIndex + 1)) {
          if (
            strpos($nextNode->getAttribute('class'), 'item-paragraph--advertising-products-paragraph') !== FALSE ||
            strpos($nextNode->getAttribute('class'), 'p--advertising-products-paragraph') !== FALSE
          ) {

            $fragments->getNode($fIndex); // Reset pointer of fragments.
            continue;
          }
        }

        // Add ad injection classes to first p-tag of text paragraph.
        try {
          $class = trim($f->getElementsByTagName('p')->item($first)->getAttribute('class') . ' pread pread-' . $i);
          $f->getElementsByTagName('p')->item($first)->setAttribute('class', $class);
        } catch (\Error $e) {}
      } else {

        // Do not append ad injection if next paragraph is an advertising paragraph.
        if ($nextNode = $fragments->getNode($fIndex + 1)) {
          if (
            strpos($nextNode->getAttribute('class'), 'item-paragraph--advertising-products-paragraph') !== FALSE ||
            strpos($nextNode->getAttribute('class'), 'p--advertising-products-paragraph') !== FALSE
          ) {

            $fragments->getNode($fIndex); // Reset pointer of fragments.
            continue;
          }
        }

        $class = trim($f->getAttribute('class') . ' pread pread-' . $i);
        $f->setAttribute('class', $class);
      }
    }
    $i++;
  }

  libxml_use_internal_errors(TRUE);
  $qp = html5qp($crawler);
  $qp->find('.pread')
    ->each(function($i, $e) use ($contents, $contents_count, $placement){
      if($content = $contents[$i % $contents_count]){
        // Wrapping is required because querypath creates a whole valid html structure
        // qp('<div>some content</div>') -> <html><head></head><body><div>some content</div></body></html>
        // qp('<script src="..."></script>') -> <html><head><script src="..."></script></head></html>
        $content_wrapped =  '<div class="ad-injct-wrpr">'.$content.'</div>';
        $content_inner = qp($content_wrapped)->find('body div.ad-injct-wrpr')->innerHTML();
        qp($e)->removeClass('pread')->$placement($content_inner);
      }
    });
  libxml_clear_errors();

  $html = $qp->find('body')->innerHtml5();
  $markup = Markup::create($html);
  return $markup;
}

/**
 * Specific ad injection for articles pages in Freundin
 *
 * @param array $children
 * @param array $contents
 * @param array $selectors
 * @param int $first
 * @param int $each
 * @param string $placement
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function infinite_ad_injection_inject_content_articles($children, $contents, $selectors, $first, $each, $placement = 'after')
{
  $contents_count = count($contents);
  $slelector = implode('|', $selectors);

  $crawler = new Crawler();

  // loading the html here instead of passing it into the constructor
  // prevents problems with the charset
  $crawler->addHtmlContent($children . '');
  $fragments = $crawler->filterXPath($slelector);

  // Rules: first ad is injected after the 2nd element, than after each 6th element
  $i = 0;
  $each = infinite_ad_injection_recalculate_each($each);
  foreach ($fragments as $fIndex => $f) {
    if ($i == $first || ($i % $each == 0 && $i > $first)) {
      // Special handling for text / viversum paragraphs.
      if ((strpos($f->getAttribute('class'), 'item-paragraph--text') !== FALSE ||
          strpos($f->getAttribute('class'), 'item-paragraph--viversum-zodiac') !== FALSE) &&
        $pTags = $f->getElementsByTagName('p')) {

        // Do not append ad injection if next paragraph is an advertising paragraph.
        if ($pTags->length <= ($first + 1) && $nextNode = $fragments->getNode($fIndex)) {
          if (strpos($nextNode->getAttribute('class'), 'item-paragraph--advertising-products-paragraph') !== FALSE) {

            $fragments->getNode($fIndex);  // Reset pointer of fragments.
            continue;
          }
        }

        // Add ad injection classes to first p-tag of text paragraph.
        try {
          $class = trim($f->getElementsByTagName('p')->item($first)->getAttribute('class') . ' pread pread-' . $i);
          $f->getElementsByTagName('p')->item($first)->setAttribute('class', $class);
        } catch (\Error $e) {
        }
      } else {

        // Do not append ad injection if next paragraph is an advertising paragraph.
        if ($nextNode = $fragments->getNode($fIndex)) {
          if (strpos($nextNode->getAttribute('class'), 'item-paragraph--advertising-products-paragraph') !== FALSE) {

            $fragments->getNode($fIndex);  // Reset pointer of fragments.
            continue;
          }
        }

        $class = trim($f->getAttribute('class') . ' pread pread-' . $i);
        $f->setAttribute('class', $class);
      }
    }
    $i++;
  }

  libxml_use_internal_errors(TRUE);
  $qp = html5qp($crawler);
  $qp->find('.pread')
    ->each(function ($i, $e) use ($contents, $contents_count, $placement) {
      if ($content = $contents[$i % $contents_count]) {
        // Wrapping is required because querypath creates a whole valid html structure
        // qp('<div>some content</div>') -> <html><head></head><body><div>some content</div></body></html>
        // qp('<script src="..."></script>') -> <html><head><script src="..."></script></head></html>
        $content_wrapped = '<div class="ad-injct-wrpr">' . $content . '</div>';
        $content_inner = qp($content_wrapped)->find('body div.ad-injct-wrpr')->innerHTML();
        qp($e)->removeClass('pread')->$placement($content_inner);
      }
    });
  libxml_clear_errors();

  $html = $qp->find('body')->innerHtml5();
  $markup = Markup::create($html);
  return $markup;
}

/**
 * Readjust the each index to avoid the zero value configuration
 * @param $value
 * @return int
 */
function infinite_ad_injection_recalculate_each($value) {
  if ($value==1 || $value==0)  return 1;
  return $value;
}

function infinite_ad_injection_get_content__dummy() {
  $contents = [];
  $contents[] = '<div style="background-color: #f00">Ad injection 1</div>';
  $contents[] = '<div style="background-color: #0f0">Ad injection 2</div>';
  $contents[] = '<div style="background-color: #00f">Ad injection 3</div>';
  return $contents;
}

function infinite_ad_injection_get_content($regions = ['dyn_blocks_node'], $rendered = TRUE) {
  $contents = [];

  $blocks = _infinite_blocks_get_dyn_region_blocks($regions);
  if (isset($blocks) && is_array($blocks)) {
    foreach ($blocks as $id => $block) {
      $block_view = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($block);

      if ($rendered) {
        $block_render = trim((string) \Drupal::service('renderer')->render($block_view));
        if (strlen($block_render)) {
          $contents[] = (string)$block_render;
        }
      } else {
        $contents[] = $block_view;
      }
    }
  }

  return $contents;
}
